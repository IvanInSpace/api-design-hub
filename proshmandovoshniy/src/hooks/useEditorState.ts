import { useState, useCallback } from 'react';\nimport { BlockType } from '../types/openapi';\nimport { v4 as uuidv4 } from 'uuid';\n\ninterface UseEditorStateOptions {\n  initialBlocks?: BlockType[];\n  onBlocksChange?: (blocks: BlockType[]) => void;\n}\n\nexport const useEditorState = (options: UseEditorStateOptions = {}) => {\n  const { initialBlocks = [], onBlocksChange } = options;\n  \n  const [blocks, setBlocks] = useState<BlockType[]>(initialBlocks);\n  const [selectedBlock, setSelectedBlock] = useState<string | null>(null);\n  const [history, setHistory] = useState<BlockType[][]>([initialBlocks]);\n  const [historyIndex, setHistoryIndex] = useState(0);\n\n  const updateHistory = useCallback((newBlocks: BlockType[]) => {\n    const newHistory = history.slice(0, historyIndex + 1);\n    newHistory.push(newBlocks);\n    setHistory(newHistory);\n    setHistoryIndex(newHistory.length - 1);\n  }, [history, historyIndex]);\n\n  const updateBlocks = useCallback((newBlocks: BlockType[]) => {\n    setBlocks(newBlocks);\n    updateHistory(newBlocks);\n    onBlocksChange?.(newBlocks);\n  }, [updateHistory, onBlocksChange]);\n\n  const addBlock = useCallback((type: BlockType['type'], data?: any) => {\n    const newBlock: BlockType = {\n      id: uuidv4(),\n      type,\n      title: getDefaultTitle(type),\n      expanded: true,\n      data: data || getDefaultData(type)\n    };\n    \n    const newBlocks = [...blocks, newBlock];\n    updateBlocks(newBlocks);\n    setSelectedBlock(newBlock.id);\n    return newBlock.id;\n  }, [blocks, updateBlocks]);\n\n  const updateBlock = useCallback((blockId: string, updates: Partial<BlockType>) => {\n    const newBlocks = blocks.map(block => \n      block.id === blockId ? { ...block, ...updates } : block\n    );\n    updateBlocks(newBlocks);\n  }, [blocks, updateBlocks]);\n\n  const deleteBlock = useCallback((blockId: string) => {\n    const newBlocks = blocks.filter(block => block.id !== blockId);\n    updateBlocks(newBlocks);\n    \n    if (selectedBlock === blockId) {\n      setSelectedBlock(newBlocks.length > 0 ? newBlocks[0].id : null);\n    }\n  }, [blocks, selectedBlock, updateBlocks]);\n\n  const duplicateBlock = useCallback((blockId: string) => {\n    const blockToDuplicate = blocks.find(block => block.id === blockId);\n    if (!blockToDuplicate) return;\n\n    const duplicatedBlock: BlockType = {\n      ...blockToDuplicate,\n      id: uuidv4(),\n      title: `${blockToDuplicate.title} (Copy)`,\n      expanded: true\n    };\n\n    const blockIndex = blocks.findIndex(block => block.id === blockId);\n    const newBlocks = [\n      ...blocks.slice(0, blockIndex + 1),\n      duplicatedBlock,\n      ...blocks.slice(blockIndex + 1)\n    ];\n    \n    updateBlocks(newBlocks);\n    setSelectedBlock(duplicatedBlock.id);\n    return duplicatedBlock.id;\n  }, [blocks, updateBlocks]);\n\n  const moveBlock = useCallback((fromIndex: number, toIndex: number) => {\n    if (fromIndex === toIndex) return;\n    \n    const newBlocks = [...blocks];\n    const [movedBlock] = newBlocks.splice(fromIndex, 1);\n    newBlocks.splice(toIndex, 0, movedBlock);\n    \n    updateBlocks(newBlocks);\n  }, [blocks, updateBlocks]);\n\n  const applyTemplate = useCallback((templateBlocks: Omit<BlockType, 'id'>[]) => {\n    const newBlocks: BlockType[] = templateBlocks.map(block => ({\n      ...block,\n      id: uuidv4()\n    }));\n    \n    updateBlocks(newBlocks);\n    if (newBlocks.length > 0) {\n      setSelectedBlock(newBlocks[0].id);\n    }\n  }, [updateBlocks]);\n\n  const undo = useCallback(() => {\n    if (historyIndex > 0) {\n      const newIndex = historyIndex - 1;\n      setHistoryIndex(newIndex);\n      setBlocks(history[newIndex]);\n      onBlocksChange?.(history[newIndex]);\n    }\n  }, [history, historyIndex, onBlocksChange]);\n\n  const redo = useCallback(() => {\n    if (historyIndex < history.length - 1) {\n      const newIndex = historyIndex + 1;\n      setHistoryIndex(newIndex);\n      setBlocks(history[newIndex]);\n      onBlocksChange?.(history[newIndex]);\n    }\n  }, [history, historyIndex, onBlocksChange]);\n\n  const canUndo = historyIndex > 0;\n  const canRedo = historyIndex < history.length - 1;\n\n  return {\n    blocks,\n    selectedBlock,\n    setSelectedBlock,\n    addBlock,\n    updateBlock,\n    deleteBlock,\n    duplicateBlock,\n    moveBlock,\n    applyTemplate,\n    undo,\n    redo,\n    canUndo,\n    canRedo\n  };\n};\n\nfunction getDefaultTitle(type: BlockType['type']): string {\n  switch (type) {\n    case 'info': return 'API Information';\n    case 'server': return 'New Server';\n    case 'path': return 'New Path';\n    case 'component': return 'New Component';\n    case 'security': return 'New Security Scheme';\n    case 'tag': return 'New Tag';\n    default: return 'New Block';\n  }\n}\n\nfunction getDefaultData(type: BlockType['type']): any {\n  switch (type) {\n    case 'info':\n      return {\n        title: 'My API',\n        version: '1.0.0',\n        description: ''\n      };\n    case 'server':\n      return {\n        url: 'https://api.example.com',\n        description: ''\n      };\n    case 'path':\n      return {\n        path: '/example',\n        summary: '',\n        description: '',\n        methods: ['get'],\n        parameters: [],\n        responses: {\n          '200': {\n            description: 'Successful response',\n            content: {\n              'application/json': {\n                schema: { type: 'object' },\n                example: { message: 'Success' }\n              }\n            }\n          }\n        }\n      };\n    case 'tag':\n      return {\n        name: 'example',\n        description: ''\n      };\n    default:\n      return {};\n  }\n}